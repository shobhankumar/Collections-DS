Tuple

  1) example tuple definition as below
    tuple<int, string, type1, type2, type3, etc....> person

  2) tuple initialization
    tuple<int, string> person(20,"shobhan")

  3) accessing tuple index
    get<20>(person)

  4) changing a tuple
    get<20>(person) = "Shobhan Kumar"

  5) defining a tuple and initialize later
    tuple <int, float, char, string> foo
    foo = make_tuple(10,2.5,'c',"abc")

  6) tie (decompose tuple into individual variables)
    tupe<int, int> foo = make_tuple(1,2);
    int x, y;
    tie(x,y) = foo;
    cout << x << y << endl;

  7) tuple_cat (concatenation of two tuples)
    tuple <int, int> foo = make_tuple(1,2);
    tuple <char, string> foo1 = make_tuple('a',"abc");
    tuple<int, int, char, string> = tuple_cat(foo,foo1);

    following also can be done
    auto t3 = make_tuple(foo,foo1);
    this automatically determines type of t3 to <int, int, char, string>
  
Set

Vector

4) map
    4.1) MAP holds key, value pairs
        map <string, int> mp = { { "shobhan","19 } ,
                                 { "foo", 20} };
    4.2) Accessing Element in Map
        mp ["shobhan"];
    4.3) insert an element into map, multiple ways like below
        4.3.1)
          mp ["foo"] = 100;
          count << mp["foo"] << endl;
        4.3.2)
          mp.insert(make_pair<string, int>("foo",100);
        4.3.3)
          pair <string,int> p1("foo",100);
          mp.insert(p1);
    4.4) erase an element key needs to be passed
          mp.erase(p1.first);
    4.5) clearing a map
          mp.clear();
    4.6) size of a map
          mp.size();
    4.7) iterating map
          for (auto itr = mp.begin(); itr != mp.end(); itr++) {
            
          }
          auto keyword is to automatically detect itr type based on what mp.beign() returns.
          another way of iterating
          for (map<string,int)::iterator itr = mp.being(); itr != mp.end();itr++) {
              cout << itr->first << itr->second << endl;
          }
    
  
